<!--
 * Copyright 2010-2014 Scale Unlimited.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
-->

<project name="cascading.utils" default="test">

	<property name="root.dir" value="${basedir}" />
	<property file="${root.dir}/build.properties" />

	<!-- ================================================================== -->
	<!-- General cleaning sources                                           -->
	<!-- ================================================================== -->

	<target name="clean" description="--> clean the project">
		<echo>cleaning ${ant.project.name}</echo>
		<delete includeemptydirs="true" failonerror="false">
			<fileset dir="${build.dir}" excludes="classes-*-eclipse/" />
		</delete>
	</target>


	<!-- ================================================================== -->
	<!-- Maven                                                              -->
	<!-- ================================================================== -->

    <target name="mvn-init" unless="compile.classpath" xmlns:artifact="urn:maven-artifact-ant">
    	<path id="maven.ant.tasks.classpath" path="${lib.dir}/maven-ant-tasks-2.1.3.jar" />
    	
        <typedef resource="org/apache/maven/artifact/ant/antlib.xml" uri="urn:maven-artifact-ant"
            classpathref="maven.ant.tasks.classpath"/>
            
        <condition property="maven.repo.local" value="${maven.repo.local}" else="${user.home}/.m2/repository">
            <isset property="maven.repo.local"/>
        </condition>
        <artifact:localRepository id="local.repository" path="${maven.repo.local}"/>
        <artifact:pom file="pom.xml" id="maven.project"/>
        <artifact:dependencies pathId="compile.classpath" filesetId="compile.fileset" useScope="compile">
            <pom refid="maven.project"/>
            <localRepository refid="local.repository"/>
        </artifact:dependencies>
        <artifact:dependencies pathId="test.classpath" filesetId="test.fileset" useScope="test">
            <pom refid="maven.project"/>
            <localRepository refid="local.repository"/>
        </artifact:dependencies>
        <artifact:dependencies pathId="runtime.classpath" filesetId="runtime.fileset" useScope="runtime">
            <pom refid="maven.project"/>
            <localRepository refid="local.repository"/>
        </artifact:dependencies>
    </target>

    <target name="mvn-install" xmlns:artifact="urn:maven-artifact-ant" depends="clean, jar, sources">
        <artifact:install file="${build.dir}/${jar.name}">
            <pom refid="maven.project"/>
    		<attach file="${build.dir}/${source-jar.name}" type="jar" classifier="sources"/>
    	</artifact:install>
    </target>

    <target name="mvn-deploy" xmlns:artifact="urn:maven-artifact-ant" depends="jar">
        <artifact:deploy file="${build.dir}/${jar.name}">
            
            <remoteRepository id="conjars" url="http://conjars.org/repo">
            </remoteRepository>
            
            <pom refid="maven.project"/>
        </artifact:deploy>
    </target>

	<!-- ================================================================== -->
	<!-- Build sources                                                      -->
	<!-- ================================================================== -->

	<target name="compile"
	        depends="mvn-init"
	        description="--> compile main classes">

		<echo>*** Compiling main code ***</echo>
		<mkdir dir="${build.dir.main-classes}" />
		<javac encoding="${build.encoding}"
		       srcdir="${main.src.dir}"
		       includes="**/*.java"
			   excludes="**/test/*.java"
		       destdir="${build.dir.main-classes}"
		       debug="${javac.debug}"
		       optimize="${javac.optimize}"
		       target="${javac.version}"
		       source="${javac.version}"
		       includeantruntime="false"
		       deprecation="${javac.deprecation}">
			<compilerarg line="${javac.args} ${javac.args.warnings}" />
			<classpath refid="compile.classpath" />
		</javac>
	</target>
	
	<target name="compile-test-artifacts"
	        depends="mvn-init, compile"
	        description="--> compile test artifacts classes">

		<echo>*** Compiling test artifacts ***</echo>
        <mkdir dir="${build.dir.test-jar-classes}" />

        <javac encoding="${build.encoding}"
               srcdir="${main.src.dir}"
               sourcepath=""
               includes="**/test/*.java"

               destdir="${build.dir.test-jar-classes}"
               debug="${javac.debug}"
               optimize="${javac.optimize}"
               target="${javac.version}"
               source="${javac.version}"
               includeantruntime="false"
               deprecation="${javac.deprecation}">
            <compilerarg line="${javac.args} ${javac.args.warnings}" />
			<classpath>
				<pathelement location="${build.dir.main-classes}" />
				<path refid="test.classpath" />
			</classpath>
        </javac>
	</target>

	<target name="dc-init" depends="compile, compile-test">
	      <!-- We need to set up the classpath with jars we're
	           using (from compile.claspath), our DatumCompilter
	           (from build.dir.main-classes), and the test
	           class that we're using as the input to our test
	           (from build.dir.test-classes). Normally the
	           caller would just need the compile and main classes
	           directory. -->
          <path id="datacompiler.classpath">
              <path refid="compile.classpath" />
  			  <pathelement location="${build.dir.main-classes}" />
  			  <pathelement location="${build.dir.test-classes}" />
          </path>

	    <taskdef name="dc" 
	             classname="com.scaleunlimited.cascading.DatumCompilerAntTask"
	             classpathref="datacompiler.classpath" />
	</target>
	
	<!-- ================================================================== -->
	<!-- Unit Tests                                                         -->
	<!-- ================================================================== -->

	<target name="compile-test" depends="compile, compile-test-artifacts">
		<echo>*** Compiling unit test code ***</echo>
		
		<mkdir dir="${build.dir.test-classes}" />
		<path id="test.path">
			<pathelement location="${build.dir.main-classes}" />
		</path>

		<javac encoding="${build.encoding}"
		       srcdir="${test.src.dir}"
		       includes="**/*.java"

		       destdir="${build.dir.test-classes}"
		       debug="${javac.debug}"
		       optimize="${javac.optimize}"
		       target="${javac.version}"
		       source="${javac.version}"
		       includeantruntime="false"
		       deprecation="${javac.deprecation}">
			<compilerarg line="${javac.args} ${javac.args.warnings}" />
			<classpath refid="test.classpath" />
			<classpath refid="test.path" />
			<classpath location="${build.dir.test-jar-classes}" />
		</javac>
	</target>

	<target name="test"
		    depends="compile-test"
			description="--> run unit tests">
		<delete dir="${build.dir.test-reports}" />
		<mkdir dir="${build.dir.test-reports}" />

		<junit showoutput="false"
		       printsummary="yes"
		       haltonfailure="no"
		       fork="yes"
		       maxmemory="512m"
		       dir="${basedir}"
		       errorProperty="tests.failed"
		       failureProperty="tests.failed">
			<classpath>
				<pathelement location="${build.dir.main-classes}" />
				<pathelement location="${build.dir.test-jar-classes}" />
                <pathelement location="${build.dir.test-classes}" />
				<pathelement location="${main.res.dir}" />
				<pathelement location="${test.res.dir}" />
				<path refid="test.classpath" />
			</classpath>
			<formatter type="plain" />
		    <jvmarg value="-Djava.security.krb5.realm="/>
		    <jvmarg value="-Djava.security.krb5.kdc="/>
		    <jvmarg value="-Djava.security.krb5.conf=/dev/null"/>
			<batchtest fork="yes"
			           todir="${build.dir.test-reports}"
			           unless="testcase">
				<fileset dir="${test.src.dir}">
					<include name="**/*Test.java" unless="testcase" />
					<exclude name="**/Abstract*.java" unless="testcase" />
					<exclude name="**/ExtendedTestCase.java"
					         unless="testcase" />
					<include name="${testcase}" if="testcase" />
				</fileset>
			</batchtest>
			<batchtest fork="yes"
			           todir="${build.dir.test-reports}"
			           if="testcase">
				<fileset dir="${test.src.dir}" includes="**/${testcase}.java" />
			</batchtest>
		</junit>
		<fail if="tests.failed">Unit tests failed!</fail>
	</target>

	<!-- ================================================================== -->
	<!-- Datum Compiler Tests                                               -->
	<!-- ================================================================== -->

	<target name="datum-compile" depends="dc-init, compile-test">
		<mkdir dir="build/generated" />

	    <dc classname="com.scaleunlimited.cascading.SomeDatumTemplateTest" srcDir="build/generated" />
	</target>
		
	<target name="datum-test" depends="datum-compile">
		<echo>*** Building Unit Tests Sources ***</echo>
		<mkdir dir="build/generated-classes" />
		<path id="test.path">
			<pathelement location="${build.dir.main-classes}" />
		</path>

		<javac encoding="${build.encoding}"
		       srcdir="build/generated"
		       includes="**/*.java"
		       destdir="build/generated-classes"
		       debug="${javac.debug}"
		       optimize="${javac.optimize}"
		       target="${javac.version}"
		       source="${javac.version}"
		       includeantruntime="false"
		       deprecation="${javac.deprecation}">
			<compilerarg line="${javac.args} ${javac.args.warnings}" />
			<classpath refid="test.classpath" />
			<classpath refid="test.path" />
		</javac>
	</target>
		

	<!-- ================================================================== -->
	<!-- Build jar                                               -->
	<!-- ================================================================== -->

	<target name="jar" depends="test">

		<tstamp>
			<format property="timestamp" pattern="MMM dd yyyy, HH:mm:ss" />
		</tstamp>

		<jar jarfile="${build.dir}/${jar.name}">
			<fileset dir="${build.dir.main-classes}" />
			<fileset dir="${main.res.dir}" />
			
			<manifest>
				<section name="Cascading.utils">
					<attribute name="Implementation-Vendor"
					           value="TransPac Software, Inc" />
					<attribute name="Implementation-Title"
					           value="${ant.project.name}" />
					<attribute name="Implementation-Version"
					           value="${version}" />
					<attribute name="Compile-Time" value="${timestamp}" />
					<attribute name="Compiled-By" value="${user.name}" />
				</section>
			</manifest>
		</jar>
		
	    <jar jarfile="${build.dir}/${test-jar.name}">
            <fileset dir="${build.dir.test-jar-classes}" />
            
            <manifest>
                <section name="Cascading.utils.test">
                    <attribute name="Implementation-Vendor"
                               value="TransPac Software, Inc" />
                    <attribute name="Implementation-Title"
                               value="${ant.project.name}" />
                    <attribute name="Implementation-Version"
                               value="${version}" />
                    <attribute name="Compile-Time" value="${timestamp}" />
                    <attribute name="Compiled-By" value="${user.name}" />
                </section>
            </manifest>
	      </jar>
	</target>

	<target name="sources">
		<jar jarfile="${build.dir}/${source-jar.name}">
			<fileset dir="${main.src.dir}" />
			<fileset dir="${main.res.dir}" />
		</jar>
	</target>
	
    <!-- ================================================================== -->
    <!-- Install in local Maven repository                                  -->
    <!-- ================================================================== -->

    <target name="install"
            depends="mvn-install"
            description="--> install SNAPSHOT jar to local repository">
    </target>

    <!-- ================================================================== -->
    <!-- Deploy to Conjars repository                                       -->
    <!-- ================================================================== -->

    <target name="deploy"
            depends="mvn-deploy"
            description="--> deploy jar to Conjars repository">
    </target>

	<!-- ================================================================== -->
	<!-- Generating eclipse file                                            -->
	<!-- ================================================================== -->

	<target name="eclipse"
		depends="mvn-init, clean-eclipse"
		description="--> create the Eclipse project files">

		<taskdef name="eclipse"
		         classname="prantl.ant.eclipse.EclipseTask"
		         classpathref="compile.classpath" />
		<mkdir dir="${build.dir.main-classes-eclipse}" />
        <mkdir dir="${build.dir.test-classes-eclipse}" />

		<eclipse>
			<settings>
				<jdtcore compilercompliance="6.0" />
				<resources encoding="UTF-8" />
			</settings>
			<project name="${ant.project.name}" />
			<classpath>
				<container path="org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.6" />

				<source path="${main.src.dir}"
				        output="${build.dir.main-classes-eclipse}" />
				
				<!-- TODO use build.properties (with more consistent names) for these paths -->
				<source path="${basedir}/src/main/resources"
				        output="${build.dir.main-classes-eclipse}" />
				<source path="${basedir}/src/test/java"
				        output="${build.dir.test-classes-eclipse}" />
				<source path="${basedir}/src/test/resources"
				        output="${build.dir.test-classes-eclipse}" />

				<output path="${build.dir.main-classes-eclipse}" />
				<library pathref="test.classpath" exported="false" />
			</classpath>
		</eclipse>
		
		<concat destfile="${root.dir}/.settings/org.eclipse.jdt.core.prefs"
		        append="true">
			<filelist dir="${root.dir}/doc/" files="eclipse-formatter.properties" />
		</concat>
	</target>

	<target name="clean-eclipse"
	        description="--> clean the Eclipse project files">
		<delete file=".classpath" />
		<delete file=".eclipse" />
		<delete file=".project" />
		<delete dir=".settings" />
	</target>


</project>
